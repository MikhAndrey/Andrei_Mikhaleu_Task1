@model Andrei_Mikhaleu_Task1.Models.ViewModels.TripDetailsViewModel
@using Andrei_Mikhaleu_Task1.Common

<div class="tp-form">
    <h1 class="mt-5 tp-label">@Model.Trip.Name</h1>

    <p class="tp-label">@Model.Trip.Description</p>

    @if (Model.Trip.Public)
    {
        <span class="badge badge-pill badge-success">Public</span>
    }
    else
    {
        <span class="badge badge-pill badge-danger">Private</span>
    }
    <p class="mt-3 tp-label">Distance: @Model.Trip.Distance &nbsp km</p>
    <p class="tp-label">Departure time: @Model.UtcStartTimeZone</p>
    <p class="tp-label">Arrival time: @Model.UtcFinishTimeZone</p>

    @{if (Model.IsCurrent)
    {
        TimeSpan ElapsedTime = DateTime.UtcNow.AddSeconds(Model.Trip.StartTimeZoneOffset).Subtract(Model.Trip.StartTime);
        <p class="tp-label">Elapsed time: @TimeUtils.GetTimeSpanString(ElapsedTime)</p>
    }
    else if (Model.IsFuture)
    {
        TimeSpan TimeUntilTrip = Model.Trip.StartTime.AddSeconds(-Model.Trip.StartTimeZoneOffset).Subtract(DateTime.UtcNow);
        <p class="tp-label">Time until trip: @TimeUtils.GetTimeSpanString(TimeUntilTrip)</p>
    }
    else
    {
        <span class="badge badge-pill badge-success">Completed</span>
    }
    }
    <div id="map" class="mt-5"></div>

    @if (Model.IsCurrentUserTrip)
    {
        @if (Model.IsCurrent)
        {
            <form asp-controller="Trips" asp-action="EndTrip" asp-route-id="@Model.Trip.TripId" method="post">
                <button type="submit" class="btn btn-primary mt-3">End trip</button>
            </form>
        }
        else if (Model.IsFuture)
        {
            <form asp-controller="Trips" asp-action="StartTrip" asp-route-id="@Model.Trip.TripId" method="post">
                <button type="submit" class="btn btn-primary mt-3">Start trip</button>
            </form>
        }
    }

    <h2 class="mt-5 tp-label">Trip gallery</h2>

    @if (Model.Trip.Images.Count == 0)
    {
        <h4 tp-label>There's nothing to see here yet</h4>
    }
    else{
        <div class="row">
        @foreach (var image in Model.Trip.Images)
        {
            <div class="col-4 mb-3"> 
                <img src="@image.Link" class="img-fluid d-block" style="object-fit: cover; height: 250px"/> 
            </div>
        }
        </div> 
    }

    <h3 class="mt-5 tp-label">Leave a comment</h3>

    <form method="post" action="@Url.Action("AddComment", "Trips")">
        <div class="form-group tp-form-group">
            <input type="hidden" name="tripId" value="@Model.Trip.TripId" />
            <label for="comment" class="tp-label">Comment:</label>
            <textarea class="form-control" id="comment" name="comment" rows="3"></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Add comment</button>
    </form>

    <h2 class="mt-5 tp-label">Comments</h2>

    <ul>
        @if (Model.Trip.Comments.Count == 0)
        {
                <h4 class="tp-label">There's nothing to see here yet</h4>
        }
        else foreach (var comment in Model.Trip.Comments)
        {
            <li class="mt-3">
                <p><strong>@comment.User.UserName</strong> - @comment.Date.ToString("dd.MM.yyyy HH:mm")</p>
                <p>@comment.Message</p>
                @if (ViewContext.HttpContext.User.Identity.Name == comment.User.UserName)
                {
                    <form method="post" action="@Url.Action("DeleteComment", "Trips")">
                        <input type="hidden" name="tripId" value="@Model.Trip.TripId" />
                        <input type="hidden" name="commentId" value="@comment.CommentId" />
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </form>
                }
                <hr/>
            </li>
        }
    </ul>
</div>

@section Scripts {
        <script src="@Url.Content("~/js/RouteBuilder.js")"></script>
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAFD93X-nfhki6P2iGKcBv142KWS6SPrjI&callback=initMap"></script>
        <script>
        @{
            var routePoints = Model.Trip.RoutePoints.OrderBy(rp => rp.Ordinal);
            var firstRoutePoint = routePoints.First();
        }
            const initLatitude = @Html.Raw(Json.Serialize(firstRoutePoint.Latitude));
            const initLongitude = @Html.Raw(Json.Serialize(firstRoutePoint.Longitude));
            initMap(initLatitude, initLongitude, 12);
        @{
            ViewData["Latitudes"] = routePoints.Select(rp => rp.Latitude);
            ViewData["Longitudes"] = routePoints.Select(rp => rp.Longitude);
        }
            const latitudes = @Html.Raw(Json.Serialize(ViewData["Latitudes"]));
            const longitudes = @Html.Raw(Json.Serialize(ViewData["Longitudes"]));
            markers = [];
            for (let i = 0; i < latitudes.length; i++){
                addMarker({
                    lat: latitudes[i],
                    lng: longitudes[i]
                });
            }
            calculateAndDisplayRoute(true);
        </script>
}