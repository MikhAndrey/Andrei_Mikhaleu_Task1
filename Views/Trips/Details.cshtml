@model TripDetailsViewModel

<h1 class="mt-5">@Model.Trip.Name</h1>

<p>@Model.Trip.Description</p>

@if (Model.Trip.Public)
{
    <span class="badge badge-pill badge-success">Public</span>
}
else
{
    <span class="badge badge-pill badge-danger">Private</span>
}
<p class="mt-3">Distance: @Model.Trip.Distance km</p>
<p>Departure time: @Model.UtcStartTimeZone</p>
<p>Arrival time: @Model.UtcFinishTimeZone</p>

@{if (Model.IsCurrent)
{
    TimeSpan ElapsedTime = DateTime.UtcNow.AddSeconds(Model.Trip.StartTimeZoneOffset).Subtract(Model.Trip.StartTime);
    <p>Elapsed time: @ElapsedTime.ToString("hh\\:mm")</p>
}
else if (Model.IsFuture)
{
    TimeSpan TimeUntilTrip = Model.Trip.StartTime.AddSeconds(-Model.Trip.StartTimeZoneOffset).Subtract(DateTime.UtcNow);
    <p>Time until trip: @TimeUntilTrip.ToString("hh\\:mm")</p>
}
else
{
    <p>Completed</p>
}
}
<div id="map" class="mt-5"></div>

@if (Model.IsCurrentUserTrip)
{
    @if (Model.IsCurrent)
    {
        <form asp-controller="Trips" asp-action="EndTrip" asp-route-id="@Model.Trip.TripId" method="post">
            <button type="submit" class="btn btn-primary">End trip</button>
        </form>
    }
    else if (Model.IsFuture)
    {
        <form asp-controller="Trips" asp-action="StartTrip" asp-route-id="@Model.Trip.TripId" method="post">
            <button type="submit" class="btn btn-primary">Start trip</button>
        </form>
    }
}

<h2 class="mt-5">Images</h2>

@if (Model.Trip.Images.Count == 0)
{
    <h4>There's nothing to see here yet</h4>
}
else foreach (var image in Model.Trip.Images)
{
    <img class="d-block w-100" src="@image.Link" alt="Trip image">
}

<h3 class="mt-5">Leave a comment</h3>

<form method="post" action="@Url.Action("AddComment", "Trips")">
    <div class="form-group">
        <input type="hidden" name="tripId" value="@Model.Trip.TripId" />
        <label for="comment">Comment:</label>
        <textarea class="form-control" id="comment" name="comment" rows="3"></textarea>
    </div>
    <button type="submit" class="btn btn-primary">Add comment</button>
</form>

<h2 class="mt-5">Comments</h2>

<ul>
    @if (Model.Trip.Comments.Count == 0)
    {
            <h4>There's nothing to see here yet</h4>
    }
    else foreach (var comment in Model.Trip.Comments)
    {
        <li class="mt-3">
            <p><strong>@comment.User.UserName</strong> - @comment.Date.ToString("dd.MM.yyyy HH:mm")</p>
            <p>@comment.Message</p>
            @if (ViewContext.HttpContext.User.Identity.Name == comment.User.UserName)
            {
                <form method="post" action="@Url.Action("DeleteComment", "Trips")">
                    <input type="hidden" name="tripId" value="@Model.Trip.TripId" />
                    <input type="hidden" name="commentId" value="@comment.CommentId" />
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            }
        </li>
    }
</ul>

@section Scripts {
        <script src="@Url.Content("~/js/RouteBuilder.js")"></script>
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAFD93X-nfhki6P2iGKcBv142KWS6SPrjI&callback=initMap"></script>
        <script>
        @{
            var routePoints = Model.Trip.RoutePoints.OrderBy(rp => rp.Ordinal);
            var firstRoutePoint = routePoints.First();
            ViewData["InitLatitude"] = firstRoutePoint.Latitude;
            ViewData["InitLongitude"] = firstRoutePoint.Longitude;
        }
            const initLatitude = @Html.Raw(Json.Serialize(ViewData["InitLatitude"]));
            const initLongitude = @Html.Raw(Json.Serialize(ViewData["InitLongitude"]));
            initMap(initLatitude, initLongitude, 12);
        @{
            ViewData["Latitudes"] = routePoints.Select(rp => rp.Latitude);
            ViewData["Longitudes"] = routePoints.Select(rp => rp.Longitude);
        }
            const latitudes = @Html.Raw(Json.Serialize(ViewData["Latitudes"]));
            const longitudes = @Html.Raw(Json.Serialize(ViewData["Longitudes"]));
            markers = [];
            for (let i = 0; i < latitudes.length; i++){
                addMarker({
                    lat: latitudes[i],
                    lng: longitudes[i]
                });
            }
            calculateAndDisplayRoute(true);
        </script>
}