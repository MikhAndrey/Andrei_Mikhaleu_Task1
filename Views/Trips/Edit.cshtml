@model Andrei_Mikhaleu_Task1.Models.Entities.Common.Trip

@{
    ViewData["Title"] = "Edit Trip";
}

<form class="bootstrap-form" asp-action="Edit" asp-route-id="@Model.TripId" enctype="multipart/form-data"> 
<div class="form-group"> 
    <label for="nameInput">Name:</label> 
    <input class="form-control" type="text" asp-for="Name" required id="nameInput"/> 
</div> 
<div class="form-group"> 
    <label for="startTimeInput">Starting Time:</label> 
    <input class="form-control" type="datetime-local" asp-for="StartTime" required id="startTimeInput" /> 
</div> 
<div class="form-group"> 
    <label for="endTimeInput">Ending Time:</label> 
    <input class="form-control" type="datetime-local" asp-for="EndTime" required readonly id="endTimeInput" /> 
</div> 
<div class="form-check"> 
    <input class="form-check-input" type="checkbox" asp-for="Public" id="publicCheck" /> 
    <label class="form-check-label" for="publicCheck">Public</label> 
</div> 
<div class="form-group"> 
    <label for="descriptionInput">Description:</label> 
    <textarea class="form-control" asp-for="Description" id="descriptionInput"></textarea> 
</div>
<div class="form-group">
    <label for="imageUpload">Images:</label>
    <input class="form-control-file" type="file" id="imageUpload" name="Images" accept="image/*" multiple />
    <h4>New images:</h4>
    <div id="imagesList"></div>
    <h4>Previously loaded images:</h4>    
    @foreach (var image in Model.Images)
        {
            <div> 
                <img src="@image.Link" width="300" height="200" /> 
                <button type="button" class="btn btn-danger remove-image" data-image-id="@image.ImageId">Delete</button> 
            </div>
        }
</div>

<div id="map" class="form-group" style="height: 400px; width: 100%; margin-bottom: 20px;"></div>
<div>Trip's distance: <span id="route-length-view">@Model.Distance</span>km</div>
<input type="hidden" name="routePoints" id="route-points-input"/>
<input type="hidden" name="Distance" asp-for="Distance" value="@Model.Distance" />
<input type="hidden" name="StartTimeZoneOffset" asp-for="StartTimeZoneOffset"/>
<input type="hidden" name="FinishTimeZoneOffset" asp-for="FinishTimeZoneOffset"/>
<div>
    <button class="btn btn-primary" type="submit">Save</button>
</div>
</form>
@section scripts {
     <script src="@Url.Content("~/js/RouteBuilder.js")"></script> 
     <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAFD93X-nfhki6P2iGKcBv142KWS6SPrjI&callback=initMap"></script> 
         <script>
        @{
            var routePoints = Model.RoutePoints.OrderBy(rp => rp.Ordinal);
            var firstRoutePoint = routePoints.First();
        }
                const initLatitude = @Html.Raw(Json.Serialize(firstRoutePoint.Latitude));
                const initLongitude = @Html.Raw(Json.Serialize(firstRoutePoint.Longitude));
                initMap(initLatitude, initLongitude, 12);
                addClickOnMap();
        @{
            var latitudes = routePoints.Select(rp => rp.Latitude);
            var longitudes = routePoints.Select(rp => rp.Longitude);
        }
                const latitudes = @Html.Raw(Json.Serialize(latitudes));
                const longitudes = @Html.Raw(Json.Serialize(longitudes));
                markers = [];
                for (let i = 0; i < latitudes.length; i++){
                    addMarker({
                        lat: latitudes[i],
                        lng: longitudes[i]
                    });
                }
                markers.forEach(el => {
                    makeMarkerDraggable(el);
                    addClickOnMarker(el);
                });
                calculateAndDisplayRoute(false);
                storeRoutePoints();
            </script>
            <script> 
                $(".remove-image").on("click", function () { 
                    var imageId = $(this).data("image-id");
                    const tripId = @(Model.TripId);
                    $.ajax({ 
                        type: "POST", 
                        url: '@Url.Action("DeleteImage", "Trips")',
                            data: { imageId: imageId, tripId: tripId},
                        success: function () { 
                            $("div").has("[data-image-id='" + imageId + "']").remove();
                            window.location.reload();
                        } 
                    }); 
                }); 
            </script>
     <script>
             const fileInput = document.getElementById('imageUpload');
            const imagesList = document.getElementById('imagesList');

            const files = [];
            const form = document.querySelector('form');
            function renderImage(file) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    const imgContainer = document.createElement('div');
                    const img = document.createElement('img');
                    const deleteButton = document.createElement('button');

                    img.src = event.target.result;
                    deleteButton.textContent = 'Delete';
                    deleteButton.onclick = function() {
                        const index = files.indexOf(file);
                        if (index >= 0) {
                            files.splice(index, 1);
                            imgContainer.remove();
                        }
                    };

                    imgContainer.appendChild(img);
                    imgContainer.appendChild(deleteButton);
                    imagesList.appendChild(imgContainer);
                }
                reader.readAsDataURL(file);
            }

            fileInput.onchange = function() {
                for (let i = 0; i < fileInput.files.length; i++) {
                    const file = fileInput.files[i];
                    if (file.type.startsWith('image/')) {
                        files.push(file);
                        renderImage(file);
                    }
                }
                fileInput.value = '';
            };
            form.addEventListener('submit', function(event) {
                event.preventDefault();
                const formData = new FormData(form);
                for (const file of files) {
                    formData.append('images', file, file.name);
                }
                fetch(form.action, {
                    method: form.method,
                    body: formData
                }).then(response => {
                    if (response.ok) {
                        window.location.href = response.url;
                    } else {
                        alert("An error occured while sending images to server");
                    }
                });
            });
     </script>
 }