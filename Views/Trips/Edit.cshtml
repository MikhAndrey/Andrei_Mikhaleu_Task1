@model Andrei_Mikhaleu_Task1.Models.Entities.Trip

@{
    ViewData["Title"] = "Edit Trip";
}

<form class="bootstrap-form" asp-action="Edit" asp-route-id="@Model.TripId" enctype="multipart/form-data"> 
<div class="form-group"> 
    <label for="nameInput">Name:</label> 
    <input class="form-control" type="text" asp-for="Name" required id="nameInput"/> 
</div> 
<div class="form-group"> 
    <label for="startTimeInput">Starting Time:</label> 
    <input class="form-control" type="datetime-local" asp-for="StartTime" required id="startTimeInput" /> 
</div> 
<div class="form-group"> 
    <label for="endTimeInput">Ending Time:</label> 
    <input class="form-control" type="datetime-local" asp-for="EndTime" required readonly id="endTimeInput" /> 
</div> 
<div class="form-check"> 
    <input class="form-check-input" type="checkbox" asp-for="Public" id="publicCheck" /> 
    <label class="form-check-label" for="publicCheck">Public</label> 
</div> 
<div class="form-group"> 
    <label for="descriptionInput">Description:</label> 
    <textarea class="form-control" asp-for="Description" id="descriptionInput"></textarea> 
</div>
<div class="form-group">
    <label for="imageUpload">Images:</label>
    <input class="form-control-file" type="file" id="imageUpload" name="Images" accept="image/*" multiple />
        @foreach (var image in Model.Images)
        {
            <img src="@image.Link" width="300" height="200" />
        }
</div>

<div id="map" class="form-group" style="height: 400px; width: 100%; margin-bottom: 20px;"></div>
<div>Trip's distance: <span id="route-length-view">@Model.Distance</span>km</div>
<input type="hidden" name="routePoints" id="route-points-input"/>
<input type="text" name="Distance" asp-for="Distance" value="@Model.Distance" />

<div>
    <button class="btn btn-primary" type="submit">Save</button>
</div>
</form>
@section scripts {
     <script src="@Url.Content("~/js/RouteBuilder.js")"></script> 
     <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAFD93X-nfhki6P2iGKcBv142KWS6SPrjI&callback=initMap"></script> 
         <script>
        @{
            var routePoints = Model.RoutePoints.OrderBy(rp => rp.Ordinal);
            var firstRoutePoint = routePoints.First();
            ViewData["InitLatitude"] = firstRoutePoint.Latitude;
            ViewData["InitLongitude"] = firstRoutePoint.Longitude;
        }
                const initLatitude = @Html.Raw(Json.Serialize(ViewData["InitLatitude"]));
                const initLongitude = @Html.Raw(Json.Serialize(ViewData["InitLongitude"]));
                initMap(initLatitude, initLongitude, 12);
                addClickOnMap();
        @{
            ViewData["Latitudes"] = routePoints.Select(rp => rp.Latitude);
            ViewData["Longitudes"] = routePoints.Select(rp => rp.Longitude);
        }
                const latitudes = @Html.Raw(Json.Serialize(ViewData["Latitudes"]));
                const longitudes = @Html.Raw(Json.Serialize(ViewData["Longitudes"]));
                markers = [];
                for (let i = 0; i < latitudes.length; i++){
                    addMarker({
                        lat: latitudes[i],
                        lng: longitudes[i]
                    });
                }
                markers.forEach(el => {
                    makeMarkerDraggable(el);
                    addClickOnMarker(el);
                });
                calculateAndDisplayRoute(false);
                storeRoutePoints();
            </script>
 }