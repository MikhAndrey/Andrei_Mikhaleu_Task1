@model TripsServiceBLL.DTO.Trips.TripDetailsDTO
@using TripsServiceBLL.Utils

@{
    ViewData["Title"] = $"{Model.Name}";
}
<div class="tp-form">
    <h1 class="mt-5 tp-label">@Model.Name</h1>

    <h4 class="tp-label">@Model.Description</h4>

    @if (Model.Public)
    {
        <div class="tp-label">Publicity:&nbsp<span class="badge badge-pill badge-success">Public</span></div>
    }
    else
    {
        <div class="tp-label">Publicity:&nbsp<span class="badge badge-pill badge-danger">Private</span></div>
    }
    <p class="mt-3 tp-label">Distance: @Model.Distance &nbsp km</p>
    <p class="tp-label">Departure time: @Model.UtcStartTimeZone</p>
    <p class="tp-label">Arrival time: @Model.UtcFinishTimeZone</p>
    <p class="tp-label">Total time of trip: @Model.Duration</p>

    @{if (Model.IsCurrent)
    {
        TimeSpan ElapsedTime = DateTime.UtcNow.AddSeconds(Model.StartTimeZoneOffset).Subtract(Model.StartTime);
        <p class="tp-label">Elapsed time: @TimeUtils.GetTimeSpanString(ElapsedTime)</p>
    }
    else if (Model.IsFuture)
    {
        TimeSpan TimeUntilTrip = Model.StartTime.AddSeconds(-Model.StartTimeZoneOffset).Subtract(DateTime.UtcNow);
        <p class="tp-label">Time until trip: @TimeUtils.GetTimeSpanString(TimeUntilTrip)</p>
    }
    else
    {
        <span class="badge badge-pill badge-success">Completed</span>
    }
    }
    <div id="map" class="mt-5"></div>

    @if (Model.IsCurrentUserTrip)
    {
        @if (Model.IsCurrent)
        {
            <form asp-controller="Trips" asp-action="EndTrip" asp-route-id="@Model.Id" method="post">
                <button type="submit" class="btn btn-primary mt-3">End trip</button>
            </form>
        }
        else if (Model.IsFuture)
        {
            <form asp-controller="Trips" asp-action="StartTrip" asp-route-id="@Model.Id" method="post">
                <button type="submit" class="btn btn-primary mt-3">Start trip</button>
            </form>
        }
    }

    <h2 class="mt-5 tp-label">Trip gallery</h2>

    @if (Model.Images.Count == 0)
    {
        <h4 class="tp-label">There's nothing to see here yet</h4>
    }
    else{
        <div class="row mt-3">
            <div class="col-md-6">
                <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-indicators">
                    @{
                        int i = 0;
                        foreach (var image in Model.Images)
                        {
                            bool isCurrentPhotoFirst = image.Id == Model.Images.FirstOrDefault().Id;
                                        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i" aria-current="@isCurrentPhotoFirst" aria-label="Slide @i" class="@(isCurrentPhotoFirst ? "active" : "")"></button>
                            i++;
                        }
                    }
                    </div>
                    <div class="carousel-inner">
                    @foreach (var image in Model.Images)
                    {
                        string imagePath = $"/{Constants.ImagesFolderName}/{Model.UserId.ToString()}/{Model.Id.ToString()}/{image.Link}";
                                <div class="carousel-item @((image.Id == Model.Images.FirstOrDefault().Id) ? "active" : "")">
                                            <img src="@imagePath" class="d-block w-100 img-responsive" style="object-fit: contain; height: 400px" alt="Trip photo">
                                </div>
                    }
                    </div>
                    <a class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </a>
                    <a class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </a>
                </div> 
            </div>
        </div>
    }

    <div class="mt-4">
        @if (Model.IsNeedToBeRated)
        {
            <button type="button" class="btn btn-primary rate-invoker" data-trip-id="@Model.Id" data-bs-toggle="modal" data-bs-target="#rateDriverModal">Rate driver of this trip</button>
        } else if (Model.Rating != null)
        {
            @await Html.PartialAsync("_DisplayTripRating", Model)	
        }
    </div>

    <h3 class="mt-3 tp-label">Leave a comment</h3>

    @await Html.PartialAsync("_AddComment", new TripsServiceBLL.DTO.Comments.CreateCommentDTO {TripId = Model.Id})

    <h2 class="mt-5 tp-label">Comments</h2>

    <ul>
        @if (Model.Comments.Count == 0)
        {
                <h4 class="tp-label">There's nothing to see here yet</h4>
        }
        else foreach (var comment in Model.Comments)
        {
            <li class="mt-3">
                <p><strong>@comment.User.UserName</strong> - @comment.Date.ToString("dd.MM.yyyy HH:mm")</p>
                <p>@comment.Message</p>
                @if (ViewContext?.HttpContext?.User?.Identity?.Name == comment.User.UserName)
                {
                    <form class="comment-delete-form" action="@Url.Action("DeleteComment", "Trips")">
                        <input type="hidden" name="commentId" value="@comment.Id" />
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </form>
                }
                <hr/>
            </li>
        }
    </ul>
</div>

<div class="modal fade" id="rateDriverModal" tabindex="-1" aria-labelledby="rateDriverModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content tp-form">
      <div class="modal-header">
        <h5 class="modal-title tp-label" id="exampleModalLabel">Please, rate driver of this trip and leave short feedback about him</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Maybe later"></button>
      </div>
      <div class="modal-body">
                @await Html.PartialAsync("_AddFeedback", new TripsServiceBLL.DTO.Feedbacks.CreateFeedbackDTO())
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Rate later</button>
        <button type="button" id="rate-driver-visible" class="btn btn-primary">Rate</button>
      </div>
    </div>
  </div>
</div>
<script>
    $(".rate-invoker").on('click', function(){
        $("#feedback-trip-id").val($(this).data('trip-id'));
    });
    $("#rate-driver-visible").on('click', () => {
        $("#rate-driver-hidden").click();
    });
</script>

@section Scripts {
    <script src="@Url.Content("~/js/RouteBuilder.js")"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAFD93X-nfhki6P2iGKcBv142KWS6SPrjI&callback=initMap"></script>
    <script>
    @{
        var routePoints = Model.RoutePoints.OrderBy(rp => rp.Ordinal);
        var firstRoutePoint = routePoints.First();
    }
        const initLatitude = @Html.Raw(Json.Serialize(firstRoutePoint.Latitude));
        const initLongitude = @Html.Raw(Json.Serialize(firstRoutePoint.Longitude));
        initMap(initLatitude, initLongitude, 12);
    @{
        var latitudes = routePoints.Select(rp => rp.Latitude);
        var longitudes = routePoints.Select(rp => rp.Longitude);
    }
        const latitudes = @Html.Raw(Json.Serialize(latitudes));
        const longitudes = @Html.Raw(Json.Serialize(longitudes));
        markers = [];
        for (let i = 0; i < latitudes.length; i++){
            addMarker({
                lat: latitudes[i],
                lng: longitudes[i]
            });
        }
        calculateAndDisplayRoute(true);
    </script>
    <script>
        $(".comment-delete-form").on("submit", function (event) {
            event.preventDefault();
            const index = $(".comment-delete-form").index(this);
            const commentId = document.getElementsByName("commentId")[index].value;
            $.ajax({
                url: this.action,
                type: "DELETE",
                data: {
                    commentId: commentId
                },
                success: function () {
                    location.reload();
                }
            });
        });                
    </script>
    <script src="@Url.Content("~/js/ratingBuilder.js")">
    </script>
}