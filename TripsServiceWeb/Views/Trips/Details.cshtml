@using TripsServiceBLL.Utils
@using TripsServiceBLL.DTO.Images
@using TripsServiceBLL.DTO.RoutePoints
@using TripsServiceBLL.DTO.Comments
@using TripsServiceBLL.DTO.Feedbacks
@model TripsServiceBLL.DTO.Trips.TripDetailsDTO

@{
	ViewData["Title"] = $"{Model.Name}";
}
<div class = "tp-form">
	<h1 class = "mt-5 tp-label">@Model.Name</h1>

	<h4 class = "tp-label">@Model.Description</h4>

	@if (Model.Public) {
		<div class = "tp-label">
			Publicity:&nbsp
			<span class = "badge badge-pill badge-success">Public</span>
		</div>
	} else {
		<div class = "tp-label">
			Publicity:&nbsp
			<span class = "badge badge-pill badge-danger">Private</span>
		</div>
	}
	<p class = "mt-3 tp-label">Distance: @Model.Distance &nbsp km</p>
	<p class = "tp-label">Departure time: @Model.UtcStartTimeZone</p>
	<p class = "tp-label">Arrival time: @Model.UtcFinishTimeZone</p>
	<p class = "tp-label">Total time of trip: @Model.Duration</p>

	@{
		if (Model.IsCurrent) {
			TimeSpan ElapsedTime = DateTime.UtcNow.AddSeconds(Model.StartTimeZoneOffset).Subtract(Model.StartTime);
			<p class = "tp-label">Elapsed time: @UtilDateTimeFunctions.GetTimeSpanString(ElapsedTime)</p>
		} else if (Model.IsFuture) {
			TimeSpan TimeUntilTrip = Model.StartTime.AddSeconds(-Model.StartTimeZoneOffset).Subtract(DateTime.UtcNow);
			<p class = "tp-label">Time until trip: @UtilDateTimeFunctions.GetTimeSpanString(TimeUntilTrip)</p>
		} else {
			<span class = "badge badge-pill badge-success">Completed</span>
		}
	}
	<div id = "map" class = "mt-5"></div>

	@if (Model.IsCurrentUserTrip) {
		@if (Model.IsCurrent) {
			<form asp-controller = "Trips" asp-action = "EndTrip" asp-route-id = "@Model.Id" method = "post">
				<button type = "submit" class = "btn btn-primary mt-3">End trip</button>
			</form>
		} else if (Model.IsFuture) {
			<form asp-controller = "Trips" asp-action = "StartTrip" asp-route-id = "@Model.Id" method = "post">
				<button type = "submit" class = "btn btn-primary mt-3">Start trip</button>
			</form>
		}
	}

	<h3 class = "mt-5 tp-label">Trip gallery</h3>

	@if (Model.Images.Count == 0) {
		<h4 class = "tp-label">There's nothing to see here yet</h4>
	} else {
		<div class = "row mt-3">
			<div class = "col-md-6">
				<div id = "carouselExampleIndicators" class = "carousel slide" data-bs-ride = "carousel">
					<div class = "carousel-indicators">
						@{
							int i = 0;
							foreach (ImageDTO image in Model.Images) {
								bool isCurrentPhotoFirst = image.Id == Model.Images.FirstOrDefault().Id;
								<button type = "button" data-bs-target = "#carouselExampleIndicators" data-bs-slide-to = "@i" aria-current = "@isCurrentPhotoFirst" aria-label = "Slide @i" class = "@(isCurrentPhotoFirst ? "active" : "")"></button>
								i++;
							}
						}
					</div>
					<div class = "carousel-inner">
						@foreach (ImageDTO image in Model.Images) {
							string imagePath = $"/{UtilConstants.ImagesFolderName}/{Model.UserId.ToString()}/{Model.Id.ToString()}/{image.Link}";
							<div class = "carousel-item @(image.Id == Model.Images.FirstOrDefault().Id ? "active" : "")">
								<img src = "@imagePath" class = "d-block w-100 img-responsive" style = "object-fit: contain; height: 400px" alt = "Trip photo">
							</div>
						}
					</div>
					<a class = "carousel-control-prev" type = "button" data-bs-target = "#carouselExampleIndicators" data-bs-slide = "prev">
						<span class = "carousel-control-prev-icon" aria-hidden = "true"></span>
						<span class = "visually-hidden">Previous</span>
					</a>
					<a class = "carousel-control-next" type = "button" data-bs-target = "#carouselExampleIndicators" data-bs-slide = "next">
						<span class = "carousel-control-next-icon" aria-hidden = "true"></span>
						<span class = "visually-hidden">Next</span>
					</a>
				</div>
			</div>
		</div>
	}

	@if (Model.Driver != null) {
		string driverPhotoLink = $"/{UtilConstants.ImagesFolderName}/{UtilConstants.DriversFolderName}/{Model.Driver.Id}/{Model.Driver?.FirstPhoto?.Link}";
		<h3 class = "tp-label mb-2">Trip driver</h3>
		<div class = "w-50 tp-gradient-standard driver-button d-flex flex-row align-items-center">
			<div class = "mr-3" style = "width:30%">
				<img src = "@driverPhotoLink" alt = "Driver Photo" style = "width:100%;height:auto;border-radius:50%;"/>
			</div>
			<div style = "flex-grow:1;" class = "main-driver-info">
				<h5 style = "display:inline-block;" class = "tp-label mr-2">@Model.Driver.Name</h5>
				<div class = "rating-container" style = "display:inline-block;">
					<span class = "rating-value text-light mt-2">@Model.Driver.AverageRating</span>
				</div>
				<p class = "tp-label">Experience: @(Model.Driver.Experience) years</p>
			</div>
		</div>
	}

	<div class = "mt-4">
		@if (Model.IsNeedToBeRated && Model.IsCurrentUserTrip) {
			<button type = "button" class = "btn btn-primary rate-invoker" data-trip-id = "@Model.Id" data-bs-toggle = "modal" data-bs-target = "#rateDriverModal">Rate driver of this trip</button>
		} else if (Model.Rating != null) {
			@await Html.PartialAsync("_DisplayTripRating", Model)
			<div>
				<h5 class = "tp-label mb-2">
					Trip driver's feedback:
				</h5>
				<p>@Model.FeedbackText</p>
				@if (Model.IsCurrentUserTrip) {
					<span>
						<button type = "button" class = "btn btn-secondary" id = "edit-feedback-btn">Edit</button>
					</span>
					<form class = "feedback-delete-form d-inline-block" action = "@Url.Action("Delete", "Feedbacks")">
							<input type = "hidden" name = "feedbackId" value = "@Model.FeedbackId"/>
							<button type = "submit" class = "btn btn-danger">Delete</button>
					</form>
				}
			</div>
		}
	</div>

	<h3 class = "mt-3 tp-label">Leave a comment</h3>

	@await Html.PartialAsync("_AddComment", new CreateCommentDTO {TripId = Model.Id})

	<h3 class = "mt-5 tp-label">Comments</h3>

	<ul>
		@if (Model.Comments.Count == 0) {
			<h4 class = "tp-label">There's nothing to see here yet</h4>
		} else {
			foreach (CommentDTO comment in Model.Comments) {
				<li class = "mt-3">
					<p>
						<strong class = "tp-label">@comment.User.UserName</strong> - @UtilDateTimeFunctions.GetTimeAgoFromNow(comment.Date)
					</p>
					<p>@comment.Message</p>
					@if (Model.IsCurrentUserTrip) {
						<form class = "comment-delete-form" action = "@Url.Action("DeleteComment", "Trips")">
							<input type = "hidden" name = "commentId" value = "@comment.Id"/>
							<button type = "submit" class = "btn btn-danger">Delete</button>
						</form>
					}
					<hr/>
				</li>
			}
		}
	</ul>
</div>

@await Html.PartialAsync("_AddFeedback", new CreateFeedbackDTO())

@section Scripts {
	<script src = "@Url.Content("~/js/RouteBuilder.js")"></script>
	<script src = "@Url.Content("~/js/ratingBuilder.js")"></script>
	<script src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyAFD93X-nfhki6P2iGKcBv142KWS6SPrjI&callback=initMap"></script>
	<script>
    @{
	    IOrderedEnumerable<RoutePointDTO> routePoints = Model.RoutePoints.OrderBy(rp => rp.Ordinal);
	    RoutePointDTO firstRoutePoint = routePoints.First();
    }
        const initLatitude = @Html.Raw(Json.Serialize(firstRoutePoint.Latitude));
        const initLongitude = @Html.Raw(Json.Serialize(firstRoutePoint.Longitude));
        initMap(initLatitude, initLongitude, 12);
    @{
	    IEnumerable<decimal> latitudes = routePoints.Select(rp => rp.Latitude);
	    IEnumerable<decimal> longitudes = routePoints.Select(rp => rp.Longitude);
    }
        const latitudes = @Html.Raw(Json.Serialize(latitudes));
        const longitudes = @Html.Raw(Json.Serialize(longitudes));
        markers = [];
        for (let i = 0; i < latitudes.length; i++){
            addMarker({
                lat: latitudes[i],
                lng: longitudes[i]
            });
        }
        calculateAndDisplayRoute(true);
    </script>
	<script>
        $(".comment-delete-form").on("submit", function (event) {
            event.preventDefault();
            const index = $(".comment-delete-form").index(this);
            const commentId = document.getElementsByName("commentId")[index].value;
            $.ajax({
                url: this.action,
                type: "DELETE",
                data: {
                    commentId: commentId
                },
                success: function () {
                    location.reload();
                }
            });
        });
        
        $(".feedback-delete-form").on("submit", function (event) {
            event.preventDefault();
            const index = $(".feedback-delete-form").index(this);
            const feedbackId = document.getElementsByName("feedbackId")[index].value;
            $.ajax({
                url: this.action,
                type: "DELETE",
                data: {
                    id: feedbackId
                },
                success: function () {
                    location.reload();
                }
            });
        });
    </script>
	<script>
        $(".rate-invoker").on('click', function(){
            $("#feedback-trip-id").val($(this).data('trip-id'));
        });
        $("#rate-driver-visible").on('click', () => {
            $("#rate-driver-hidden").click();
        });
    </script>

	<script>
        $('#edit-feedback-btn').click(function (){
            $('#trip-rating-form').attr('action', '/Feedbacks/Update');
            $('#trip-rating-form').attr('asp-action', 'Update');
            $('#feedback-text').text("@Model.FeedbackText");
            $('#feedback-id').val("@Model.FeedbackId");
            $('form .star').eq(@(Model.Rating - 1)).mouseenter();
            $('form .star').eq(@(Model.Rating - 1)).click();
            $('#rateDriverModal').modal('show');
        });   
    </script>
}
